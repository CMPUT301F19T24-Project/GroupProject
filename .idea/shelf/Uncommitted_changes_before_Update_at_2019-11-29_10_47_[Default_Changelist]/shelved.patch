Index: app/src/main/java/com/example/groupproject/ui/moodlists/MoodEventListActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.groupproject.ui.moodlists;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.Gravity;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ListView;\r\nimport android.widget.PopupWindow;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport com.example.groupproject.data.moodevents.MoodEvent;\r\nimport com.example.groupproject.R;\r\nimport com.example.groupproject.data.relations.Relationship;\r\nimport com.example.groupproject.data.relations.SocialSituation;\r\nimport com.example.groupproject.data.user.User;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\n\r\nimport static android.R.layout.simple_spinner_item;\r\nimport static com.example.groupproject.MainActivity.FSH_INSTANCE;\r\nimport static com.example.groupproject.MainActivity.USER_INSTANCE;\r\n\r\n\r\npublic class MoodEventListActivity extends AppCompatActivity {\r\n\r\n    private ListView moodEventList;\r\n    private ListMoodEventsAdapter moodEventAdapter;\r\n    private ArrayList<MoodEvent> moodEventDataList;\r\n\r\n    // Defines\r\n    private static final SortingMethod DEFAULT_SORTING_METHOD = SortingMethod.DATE_NTOO;\r\n\r\n    private static final int PICK_IMAGE = 0;\r\n    private static final int CAMERA_PIC_REQUEST = 1;\r\n\r\n\r\n    Uri imageUri;\r\n    Bitmap bitmap;\r\n\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        System.out.println(\"MoodEventListActivity\");\r\n        setContentView(R.layout.v_list_mood_events);\r\n\r\n        TextView tv_currentUserName = findViewById(R.id.tv_user_name);\r\n        tv_currentUserName.setText(USER_INSTANCE.getUserName());\r\n\r\n        initialize();\r\n    }\r\n\r\n    private void initialize()\r\n    {\r\n//        ImageView iv_desc = findViewById(R.id.iv_img_desc);\r\n        /**\r\n         * Initializes the private variables of this class & View elements\r\n         */\r\n        moodEventList = findViewById(R.id.moodEventList);\r\n        moodEventDataList = new ArrayList<>();\r\n        moodEventAdapter = new ListMoodEventsAdapter(this, moodEventDataList, DEFAULT_SORTING_METHOD);\r\n        moodEventList.setAdapter(moodEventAdapter);\r\n\r\n        setupPopUpMenu();\r\n        setupSorting();\r\n        setupSearching();\r\n\r\n        moodEventAdapter.addAll(populateFromRemote());\r\n        moodEventAdapter.notifyDataSetChanged();\r\n\r\n        for(MoodEvent a: moodEventDataList){\r\n            System.out.println(a.getReasonText());\r\n            System.out.println(a.getTimeStamp().toString());\r\n            System.out.println(\"\");\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void setupSorting()\r\n    {\r\n        /**\r\n         * Initializes the spinner object responsible for ordering the moodevents\r\n         */\r\n        final Spinner s_sortBy = findViewById(R.id.s_sortby);\r\n        s_sortBy.setAdapter(new ArrayAdapter<>(MoodEventListActivity.this, simple_spinner_item, SortingMethod.getNames()));\r\n        s_sortBy.setSelection(Arrays.asList(SortingMethod.values()).indexOf(DEFAULT_SORTING_METHOD)); // Default\r\n        moodEventAdapter.setSortingMethod(DEFAULT_SORTING_METHOD);\r\n\r\n        s_sortBy.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\r\n                moodEventAdapter.setSortingMethod(SortingMethod.values()[i]);\r\n                moodEventList.clearChoices();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> adapterView) {\r\n                // Do nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setupSearching()\r\n    {\r\n        /**\r\n         * Initializes the search box responsible for filtering the mood events\r\n         */\r\n        final Spinner s_sortBy = findViewById(R.id.s_sortby);\r\n        EditText ed_searchFor = findViewById(R.id.et_searchFor);\r\n\r\n        ed_searchFor.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {\r\n                /**\r\n                 * Hide the header to provide more room\r\n                 *\r\n                 * @param - See base method for details\r\n                 */\r\n                LinearLayout ll = findViewById(R.id.ll_header);\r\n                ll.setVisibility(View.GONE);\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\r\n                /**\r\n                 * Update the listview with every keystroke\r\n                 *\r\n                 * @param - See base method for details\r\n                 */\r\n                String query = charSequence.toString();\r\n\r\n                moodEventAdapter.clear();\r\n                if (query.isEmpty())\r\n                {\r\n                    moodEventAdapter.addAll(populateFromRemote());\r\n                    moodEventAdapter.setSortingMethod(SortingMethod.values()[s_sortBy.getSelectedItemPosition()]);\r\n\r\n                }\r\n                else\r\n                {\r\n                    for(MoodEvent me : populateFromRemote())\r\n                    {\r\n                        if(me.contains((query)))\r\n                        {\r\n                            moodEventAdapter.add(me);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                moodEventAdapter.notifyDataSetChanged();\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable editable) {\r\n                /**\r\n                 * Renable the header after keyboard closes\r\n                 *\r\n                 * @param - See base method for details\r\n                 */\r\n                LinearLayout ll = findViewById(R.id.ll_header);\r\n                ll.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void setupPopUpMenu()\r\n    {\r\n        /**\r\n         * Initializes the popup view that displays a moodevent's detailed information\r\n         */\r\n        moodEventList.setOnItemClickListener(new AdapterView.OnItemClickListener()\r\n        {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\r\n                // Initialize Accessors\r\n                LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);\r\n                final View popupView = inflater.inflate(R.layout.v_list_mood_events_details, null);\r\n                final PopupWindow popupWindow = new PopupWindow(popupView, LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT, true);\r\n                final MoodEvent curMoodEvent = (MoodEvent) moodEventList.getItemAtPosition(i);\r\n\r\n                popupWindow.showAtLocation(view, Gravity.CENTER, 0, 0);\r\n                popupWindow.setOutsideTouchable(true);\r\n\r\n                LinearLayout ll_header = popupView.findViewById(R.id.ll_detail_header);\r\n                TextView tv_moodName = popupView.findViewById(R.id.tv_mood_name_details);\r\n                TextView tv_timeStamp = popupView.findViewById(R.id.tv_time_stamp_details);\r\n                final Spinner s_socialSituation = popupView.findViewById(R.id.s_details_social_situation);\r\n                final EditText et_desc = popupView.findViewById(R.id.tv_desc);\r\n                ImageView iv_desc = popupView.findViewById(R.id.iv_img_desc);\r\n\r\n                // TODO: Renable me\r\n//                LinearLayout ll_detailedMap = popupView.findViewById(R.id.ll_detailed_map);\r\n//                MapView mv_map = popupView.findViewById(R.id.mv_detail_map_view);\r\n\r\n                Button b_apply = popupView.findViewById(R.id.b_apply);\r\n                Button b_delete = popupView.findViewById(R.id.b_delete);\r\n                Button b_image_from_camera = popupView.findViewById(R.id.b_add_from_camera);\r\n                Button b_image_from_photos = popupView.findViewById(R.id.b_add_from_photo);\r\n\r\n                if(curMoodEvent.getOwner().getUserName().compareTo(USER_INSTANCE.getUserName()) != 0)\r\n                {\r\n                    // Disable features if this mood event is not owned by the current user\r\n                    s_socialSituation.setEnabled(false);\r\n                    b_apply.setVisibility(View.GONE);\r\n                    b_delete.setVisibility(View.GONE);\r\n                    b_image_from_camera.setVisibility(View.GONE);\r\n                    b_image_from_photos.setVisibility(View.GONE);\r\n                }\r\n\r\n                // Populate display\r\n                ll_header.setBackgroundColor(curMoodEvent.getMood().getColor());\r\n                tv_moodName.setText(curMoodEvent.getMood().getName());\r\n                tv_timeStamp.setText(String.format(\"%d-%d-%d\",\r\n                        curMoodEvent.getTimeStamp().get(Calendar.DATE),\r\n                        curMoodEvent.getTimeStamp().get(Calendar.MONTH)+1,\r\n                        curMoodEvent.getTimeStamp().get(Calendar.YEAR)));\r\n\r\n                // Setup spinner\r\n                s_socialSituation.setAdapter(new ArrayAdapter<String>(MoodEventListActivity.this, simple_spinner_item, SocialSituation.getNames()));\r\n                s_socialSituation.setSelection(Arrays.asList(SocialSituation.values()).indexOf(curMoodEvent.getSocialSituation()));\r\n\r\n\r\n                if(curMoodEvent.getLatLng() == null)\r\n                {\r\n                    // TODO: Renable me\r\n//                    ll_detailedMap.setVisibility(View.GONE);\r\n                }\r\n\r\n                et_desc.setText(curMoodEvent.getReasonText());\r\n\r\n\r\n                b_image_from_camera.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View view) {\r\n                        // TODO\r\n                        openCamera();\r\n\r\n                    }\r\n                });\r\n\r\n                b_image_from_photos.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View view) {\r\n                        // TODO\r\n                        openGallery();\r\n\r\n                    }\r\n                });\r\n\r\n                b_apply.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View view) {\r\n                        /**\r\n                         * Replace the moodevent in the remote with the updated copy\r\n                         * @@param - See base method for details\r\n                         */\r\n                        curMoodEvent.setReasonText(et_desc.getText().toString());\r\n\r\n                        // TODO: Add me\r\n                        curMoodEvent.setReasonImage(bitmap);\r\n//                        curMoodEvent.setLocation();\r\n                        curMoodEvent.setSocialSituation(SocialSituation.values()[s_socialSituation.getSelectedItemPosition()]);\r\n\r\n                        FSH_INSTANCE.getInstance().fsh.editMoodEvent(curMoodEvent);\r\n                        popupWindow.dismiss();\r\n                        moodEventAdapter.notifyDataSetChanged();\r\n\r\n                    }\r\n                });\r\n\r\n                b_delete.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View view) {\r\n                        /**\r\n                         * Delete moodevent from adapter, and from remote\r\n                         * @param - See base method for details\r\n                         */\r\n                        moodEventAdapter.remove(curMoodEvent);\r\n                        FSH_INSTANCE.getInstance().fsh.deleteMoodEvent(curMoodEvent);\r\n                        moodEventAdapter.notifyDataSetChanged();\r\n                        popupWindow.dismiss();\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private void openGallery(){\r\n        Intent gallery = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.INTERNAL_CONTENT_URI);\r\n        startActivityForResult(gallery, PICK_IMAGE);\r\n    }\r\n\r\n    private void openCamera(){\r\n        Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n        startActivityForResult(cameraIntent, CAMERA_PIC_REQUEST);\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data){\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        switch(requestCode) {\r\n            case PICK_IMAGE:\r\n                if(resultCode == RESULT_OK){\r\n                    imageUri = data.getData();\r\n\r\n//                    imageView.setImageURI(imageUri);\r\n                    int curPosition = moodEventList.getSelectedItemPosition();\r\n                    if (moodEventDataList.get(curPosition) != null){\r\n                        System.out.println(\"HERE!!\");\r\n                    }\r\n\r\n\r\n                    FSH_INSTANCE.getInstance().fsh.uploadImage(imageUri); // TODO\r\n\r\n\r\n//                    try {\r\n//                        bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), imageUri);\r\n//                    } catch (IOException e) {\r\n//                        e.printStackTrace();\r\n//                    }\r\n                }\r\n\r\n                break;\r\n            case CAMERA_PIC_REQUEST:\r\n                if(resultCode == RESULT_OK){\r\n                    imageUri = data.getData();\r\n//                    imageView.setImageURI(imageUri);\r\n                    Bundle extras = data.getExtras();\r\n                    bitmap = (Bitmap) extras.get(\"data\");\r\n                    FSH_INSTANCE.getInstance().fsh.uploadImageFromCamera(bitmap, );\r\n//                    imageView.setImageBitmap(bitmap);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private ArrayList<MoodEvent> populateFromRemote()\r\n    {\r\n        /**\r\n         * Fetches all mood events the current user is allowed to see from the remote.\r\n         */\r\n        ArrayList<MoodEvent > me = FSH_INSTANCE.getInstance().fsh.getAllCachedMoodEvents();\r\n        ArrayList<Relationship> rs = FSH_INSTANCE.getInstance().fsh.getAllCachedRelationships();\r\n        ArrayList<String> user = new ArrayList<>();\r\n        ArrayList<MoodEvent > rc = new ArrayList<>();\r\n\r\n        Log.d(\"pfr debug mood event:\", \"list of cachedMoodEvents. size: \" + me.size());\r\n        for (MoodEvent i: me){\r\n            Log.d(\"pfr debug mood event: \", i.toString());\r\n        }\r\n\r\n        Log.d(\"pfr debug mood event:\", \"list of cachedRelationships. size: \" + rs.size());\r\n        for (Relationship i: rs){\r\n            Log.d(\"pfr debug mood event: \", \"sender :\" + i.getSender().getUserName() + \" recipient: \" +  i.getRecipiant().getUserName() + \" status: \" + i.getStatus().toString());\r\n        }\r\n\r\n        Log.d(\"pfr debug mood event:\", \"user's name is: \" + USER_INSTANCE.getUserName());\r\n        user.add(USER_INSTANCE.getUserName()); // Add myself to list of users.\r\n        for(Relationship i : rs)\r\n        {\r\n            if(i.getSender().getUserName().compareTo(USER_INSTANCE.getUserName()) == 0 && i.isVisible())\r\n            {\r\n                user.add(i.getRecipiant().getUserName());\r\n            }\r\n        }\r\n\r\n\r\n\r\n        for(MoodEvent i : me)\r\n        {\r\n            System.out.println(\"Debugger \" + i.toString());\r\n\r\n            if(user.contains(i.getOwner().getUserName()))\r\n            {\r\n                rc.add(i);\r\n            }\r\n        }\r\n        return rc;\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/groupproject/ui/moodlists/MoodEventListActivity.java	(revision aace10933dda914bccb86a0fc8952a29b05f9857)
+++ app/src/main/java/com/example/groupproject/ui/moodlists/MoodEventListActivity.java	(date 1575049649000)
@@ -334,7 +334,7 @@
                     }
 
 
-                    FSH_INSTANCE.getInstance().fsh.uploadImage(imageUri); // TODO
+//                    FSH_INSTANCE.getInstance().fsh.uploadImage(imageUri); // TODO
 
 
 //                    try {
@@ -351,7 +351,7 @@
 //                    imageView.setImageURI(imageUri);
                     Bundle extras = data.getExtras();
                     bitmap = (Bitmap) extras.get("data");
-                    FSH_INSTANCE.getInstance().fsh.uploadImageFromCamera(bitmap, );
+//                    FSH_INSTANCE.getInstance().fsh.uploadImageFromCamera(bitmap, );
 //                    imageView.setImageBitmap(bitmap);
                 }
                 break;
